import Head from "next/head";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import ConfirmActionModal from "../../../components/utils/confirm_action_modal";
import ErrorCard from "../../../components/utils/error_card";
import ErrorModal from "../../../components/utils/error_modal";
import Loading from "../../../components/utils/loading";
import LoadingModal from "../../../components/utils/loading_modal";
import SuccessModal from "../../../components/utils/success_modal";
import { ActiveClassState } from "../../../redux/features/active_class";
import { RootState } from "../../../redux/store";

import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import DraggableContentCard from "../../../components/contents/draggable_content_card";
import SupportMaterialHeader from "../../../components/contents/supportmaterials_header";
import SupportMaterialCard from "../../../components/contents/supportmaterial_card";
import SupportMaterialsService from "../../../services/supportmaterials.service";

export type SupportMaterialsType = {
  id: number;
  title: string;
  order: number;
};

export default function SupportMaterials() {
  // On Page Load
  const [isPageLoading, setIsPageLoading] = useState(false);
  const [error, setError] = useState(false);

  // On User interaction
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [confirmDeleteMaterial, setConfirmDeleteMaterial] = useState({
    material_id: -1,
    order: -1,
  });
  const [view, setView] = useState("normal");

  // Page Data
  const [supportMaterials, setSupportMaterials] = useState<
    Array<SupportMaterialsType>
  >([]);

  // Class state (Redux)
  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );

  const deleteSupportMaterial = async ({
    material_id,
    order,
  }: {
    material_id: number;
    order: number;
  }) => {
    setIsLoading(true);

    const delete_material_response =
      await SupportMaterialsService.deleteMaterial(
        class_id,
        material_id
      );

    setIsLoading(false);

    if (delete_material_response.error) {
      // An error occured
      setErrorMessage(
        "Aconteceu um erro ao apagar o material de apoio. Por favor tente novamente."
      );
    } else {
      // SupportMaterial deleted successfully
      setSuccessMessage(
        "O material de apoio " + order + " foi eliminado com sucesso!"
      );
      let _supportMaterials = supportMaterials;
      _supportMaterials.splice(order - 1, 1);
      for (let idx = order - 1; idx < _supportMaterials.length; idx++) {
        _supportMaterials[idx].order -= 1;
      }
      setSupportMaterials(_supportMaterials);
    }
    setConfirmDeleteMaterial({ material_id: -1, order: -1 });
  };

  const changeOrder = async () => {
    setIsLoading(true);

    let new_order = supportMaterials.map((item) => item.id);
    const change_order_response = await SupportMaterialsService.changeOrder(class_id, new_order);

    setIsLoading(false);

    if (change_order_response.error) {
      setErrorMessage(
        "Aconteceu um erro ao editar a ordem dos materiais de apoio. Por favor tente novamente."
      );
    } else {
      // Order changed successfully
      setView("normal");
    }
  }

  useEffect(() => {
    setIsPageLoading(true);
    SupportMaterialsService.getMaterials(class_id)
      .then((data) => {
        setSupportMaterials(data);
      })
      .catch((err) => {
        setError(true);
      })
      .finally(() => {
        setIsPageLoading(false);
      });
  }, [class_id]);

  if (isPageLoading) return <Loading />;

  const reorder = (startIndex: number, endIndex: number) => {
    const [removed] = supportMaterials.splice(startIndex, 1);
    supportMaterials.splice(endIndex, 0, removed);

    return supportMaterials;
  };

  const onDragEnd = (result: any) => {
    // dropped outside the list
    if (!result.destination) {
      return;
    }

    const items = reorder(result.source.index, result.destination.index);
    console.log(items);
    setSupportMaterials(items);
  };

  return (
    <>
      <Head>
        <title>UNO - Materiais de apoio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <SupportMaterialHeader
            set_order_view={setView}
            view={view}
            confirm_action={changeOrder}
          />
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter os grupos de atividades. Por favor tente novamente." />
          </div>
        )}

        {view === "normal" && (
          <>
            {supportMaterials.map(function (
              material: SupportMaterialsType,
              index
            ) {
              return (
                <div className="row g-3 my-1" key={material.id}>
                  <SupportMaterialCard
                    id={material.id}
                    name={material.title}
                    order={index+1}
                    setConfirmAction={setConfirmDeleteMaterial}
                  />
                </div>
              );
            })}
          </>
        )}

        {view === "edit_order" && (
          <>
            <DragDropContext onDragEnd={onDragEnd}>
              <Droppable droppableId="droppable">
                {(provided, snapshot) => (
                  <div {...provided.droppableProps} ref={provided.innerRef}>
                    {supportMaterials.map((item, index) => (
                      <Draggable
                        key={item.id}
                        draggableId={item.id.toString()}
                        index={index}
                      >
                        {(provided, snapshot) => (
                          <div
                            className="row g-3 my-1"
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                          >
                            <DraggableContentCard
                              id={item.id}
                              name={item.title}
                              order={index + 1}
                            />
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          </>
        )}
      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
      />
      {isLoading && <LoadingModal />}
      <ConfirmActionModal
        show={confirmDeleteMaterial.material_id !== -1}
        onHide={() =>
          setConfirmDeleteMaterial({ material_id: -1, order: -1 })
        }
        confirmAction={() => deleteSupportMaterial(confirmDeleteMaterial)}
        message={
          "Tem a certeza que pretende eliminar o material de apoio " +
          confirmDeleteMaterial.order +
          "?"
        }
      />
    </>
  );
}
