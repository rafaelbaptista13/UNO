import { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";
import NewActivityForm from "../../../../../../components/contents/activityform/new_activity_form";
import ConfirmActionModal from "../../../../../../components/utils/confirm_action_modal";
import PageHeader from "../../../../../../components/utils/page_header";
import { useSelector, useDispatch } from "react-redux";
import { setType, setTitle, ActivitiesState } from "../../../../../../redux/features/activitiesSlice";
import { useEffect, useState } from "react";
import ErrorModal from "../../../../../../components/utils/error_modal";
import SuccessModal from "../../../../../../components/utils/success_modal";
import LoadingModal from "../../../../../../components/utils/loading_modal";
import { web_server } from "../../../../../../config";
import { activities_type } from "../index";
import axios from "axios";
import { RootState } from "../../../../../../redux/store";
import ActivitiesService from "../../../../../../services/activities.service";

export type ActivityType = {
  id: number;
  type: string;
  activity_number: number;
  title: string;
  createdAt: string;
  updatedAt: string;
  weekcontent_id: number;
};

interface EditActivityProps {
  activity: ActivityType;
  error?: boolean;
}

export default function EditActivity({ activity, error }: EditActivityProps) {
  const activities_state = useSelector<RootState, ActivitiesState>((state) => state.activities);
  const dispatch = useDispatch();

  const [show_confirm_action_modal, setShowConfirmActionModal] =
    useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  
  const updateActivity = async () => {
    setShowConfirmActionModal(false);
    setIsLoading(true);

    const update_activity_response = await ActivitiesService.updateActivity(activity.id, activities_state.type, activities_state.title);

    setIsLoading(false);

    if (update_activity_response.error) {
      // An error occured
      setErrorMessage(
        "Aconteceu um erro ao atualizar a atividade. Por favor tente novamente."
      );
    } else {
      // Activity updated successfully
      setSuccessMessage(
        "A atividade do tipo " + activities_type[activities_state.type] + " foi atualizada com sucesso!"
      );
    }
  };

  useEffect(() => {
    dispatch(setType(activity.type))
    dispatch(setTitle(activity.title))
  }, [activity.title, activity.type, dispatch])

  return (
    <>
      <Head>
        <title>UNO - Conte√∫dos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeader header_text={`${activity.activity_number}. Atividade - Editar`} />
        </div>

        <div className="row g-3 mt-2 mb-4">
          <NewActivityForm />
        </div>

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <button
              className="btn btn-success"
              onClick={() => setShowConfirmActionModal(true)}
            >
              Concluir
            </button>
            <Link href={`/contents/weeks/edit/${activity.weekcontent_id}`}>
              <button className="btn btn-danger">Cancelar</button>
            </Link>
          </div>
        </div>
      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
        button_link_path={`/contents/weeks/edit/${activity.weekcontent_id}`}
      />
      {isLoading && <LoadingModal />}
      <ConfirmActionModal
        message={`Tem a certeza que pretende atualizar a atividade?`}
        onHide={() => setShowConfirmActionModal(false)}
        show={show_confirm_action_modal}
        confirmAction={() => updateActivity()}
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {

  const cookies = context.req.headers.cookie;
  const activity_id = context.query.activity_id;

  let activity_request;
  try {
    activity_request = await axios.get(`${web_server}/api/activities/${activity_id}`, {
      headers: {
        "Cookie": cookies
      }
    });
  } catch (e) {
    console.log(e);
    return {
      props: {
        activity: {},
        error: true,
      },
    };
  }

  // Handle error
  if (activity_request.status !== 200) {
    return {
      props: {
        activity: {},
        error: true,
      },
    };
  }

  const activity_response = await activity_request.data;

  return {
    props: {
      activity: activity_response,
    },
  };
};
