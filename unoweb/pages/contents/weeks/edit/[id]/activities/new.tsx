import { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";
import NewActivityForm from "../../../../../../components/contents/activityform/new_activity_form";
import ConfirmActionModal from "../../../../../../components/utils/confirm_action_modal";
import PageHeader from "../../../../../../components/utils/page_header";
import { useSelector } from "react-redux";
import { ActivitiesState } from "../../../../../../redux/features/activitiesSlice";
import { useState } from "react";
import ErrorModal from "../../../../../../components/utils/error_modal";
import SuccessModal from "../../../../../../components/utils/success_modal";
import LoadingModal from "../../../../../../components/utils/loading_modal";
import { activities_type } from "../index";
import { RootState } from "../../../../../../redux/store";
import ActivitiesService from "../../../../../../services/activities.service";
import { ActiveClassState } from "../../../../../../redux/features/active_class";

interface ContentWeekProps {
  weekcontent_id: number;
}

export default function NewActivity({ weekcontent_id }: ContentWeekProps) {
  const activities_state = useSelector<RootState, ActivitiesState>((state) => state.activities);

  const [show_confirm_action_modal, setShowConfirmActionModal] =
    useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );

  const createNewActivity = async () => {
    setShowConfirmActionModal(false);
    setIsLoading(true);

    const new_activity_response = await ActivitiesService.createActivity(class_id, activities_state.type, weekcontent_id, activities_state.title)

    setIsLoading(false);

    if (new_activity_response.error) {
      // An error occured
      setErrorMessage(
        "Aconteceu um erro ao criar a nova atividade. Por favor tente novamente."
      );
    } else {
      // Activity created successfully
      //let results = await new_activity_response.json();
      setSuccessMessage(
        "A atividade do tipo " + activities_type[activities_state.type] + " foi criada com sucesso!"
      );
    }
  };

  return (
    <>
      <Head>
        <title>UNO - Conte√∫dos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeader header_text={"Nova Atividade"} />
        </div>

        <div className="row g-3 mt-2 mb-4">
          <NewActivityForm />
        </div>

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <button className="btn btn-success" onClick={() => setShowConfirmActionModal(true)}>Concluir</button>
            <Link href={`/contents/weeks/edit/${weekcontent_id}`}>
              <button className="btn btn-danger">Cancelar</button>
            </Link>
          </div>
        </div>
      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
        button_link_path={`/contents/weeks/edit/${weekcontent_id}`}
      />
      {isLoading && <LoadingModal />}
      <ConfirmActionModal
        message={`Tem a certeza que pretende criar uma atividade do tipo ${activities_type[activities_state.type]}?`}
        onHide={() => setShowConfirmActionModal(false)}
        show={show_confirm_action_modal}
        confirmAction={() => createNewActivity()}
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const weekcontent_id = context.query.id;

  return {
    props: {
      weekcontent_id: weekcontent_id,
    },
  };
};
