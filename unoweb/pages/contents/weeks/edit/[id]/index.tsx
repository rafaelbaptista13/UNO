import { GetServerSideProps } from "next";
import Head from "next/head";
import ActivityCard from "../../../../../components/contents/activity_card";
import ErrorCard from "../../../../../components/utils/error_card";
import PageHeaderWithLinkCard from "../../../../../components/utils/page_header_with_link_card";
import { api_server } from "../../../../../config";

export type ActivitiesType = {
  id: number;
  type: string;
  activity_number: number;
  weekcontent_id: number;
  title: string;
  createdAt: string;
  updatedAt: string;
};

interface ContentWeekProps {
  weekcontent_id: number;
  week_number: number;
  activities: Array<ActivitiesType>;
  error?: boolean;
}

export default function EditWeek({
  weekcontent_id,
  week_number,
  activities,
  error,
}: ContentWeekProps) {
  return (
    <>
      <Head>
        <title>UNO - Conteúdos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeaderWithLinkCard
            header_text={"Semana " + week_number + " - Editar atividades"}
            button_text="Nova atividade"
            link_path={`/contents/weeks/edit/${weekcontent_id}/activities/new`}
          />
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter as atividades. Por favor tente novamente." />
          </div>
        )}
        {activities.map(function (activity: ActivitiesType, index) {
          return (
            <div className="row g-3 my-1" key={activity.activity_number}>
              <ActivityCard
                num={activity.activity_number + "."}
                title={activity.title}
                type={activity.type}
                description={"Vídeo - 1m 24s"}
              />
            </div>
          );
        })}

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <button className="btn btn-success">Concluir</button>
            <button className="btn btn-danger">Cancelar</button>
          </div>
        </div>
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const weekcontent_id = context.query.id;

  // Get week content details and activities
  let weekcontent_request;
  let activities_request;
  try {
    weekcontent_request = await fetch(`${api_server}/contents/weeks/${weekcontent_id}`, {
      method: "GET",
    });
    activities_request = await fetch(`${api_server}/activities?week_content_id=${weekcontent_id}`, {
      method: "GET",
    });
  } catch (e) {
    console.log(e);
    return {
      props: {
        weekcontent_id: weekcontent_id,
        activities: [],
        error: true,
      },
    };
  }

  // Handle error
  if (weekcontent_request.status !== 200 || activities_request.status !== 200) {
    return {
      props: {
        weekcontent_id: weekcontent_id,
        activities: [],
        error: true,
      },
    };
  }

  const weekcontent_response = await weekcontent_request.json();
  const activities_response = await activities_request.json();

  return {
    props: {
      weekcontent_id: weekcontent_id,
      week_number: weekcontent_response.week_number,
      activities: activities_response,
    },
  };
};
