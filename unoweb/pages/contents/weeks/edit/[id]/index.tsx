import { GetServerSideProps } from "next";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import ActivityCard from "../../../../../components/contents/activity_card";
import ErrorCard from "../../../../../components/utils/error_card";
import PageHeaderWithLinkCard from "../../../../../components/utils/page_header_with_link_card";
import { web_server } from "../../../../../config";
import { ButtonPrimary } from "../../../../../utils/buttons";
import ErrorModal from "../../../../../components/utils/error_modal";
import LoadingModal from "../../../../../components/utils/loading_modal";
import SuccessModal from "../../../../../components/utils/success_modal";
import ConfirmActionModal from "../../../../../components/utils/confirm_action_modal";
import axios from "axios";
import ActivitiesService from "../../../../../services/activities.service";

export type ActivitiesType = {
  id: number;
  type: string;
  activity_number: number;
  weekcontent_id: number;
  title: string;
  createdAt: string;
  updatedAt: string;
};

interface ContentWeekProps {
  weekcontent_id: number;
  week_number: number;
  activities: Array<ActivitiesType>;
  error?: boolean;
}

export const activities_type: { [type: string]: string } = {
  video: "Vídeo",
  exercise: "Exercício",
  game: "Jogo",
  audio: "Áudio",
  question: "Pergunta",
};

export default function EditWeek({
  weekcontent_id,
  week_number,
  activities,
  error,
}: ContentWeekProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [confirmActionActivity, setConfirmActionActivity] = useState({
    activity_id: -1,
    activity_number: -1,
  });

  const deleteActivity = async ({
    activity_id,
    activity_number,
  }: {
    activity_id: number;
    activity_number: number;
  }) => {
    setIsLoading(true);

    const delete_activity_response = await ActivitiesService.deleteActivity(activity_id, weekcontent_id);

    setIsLoading(false);

    if (delete_activity_response.error) {
      // An error occured
      setErrorMessage(
        "Aconteceu um erro ao apagar a atividade. Por favor tente novamente."
      );
    } else {
      // Activity deleted successfully
      setSuccessMessage(
        "A atividade " + activity_number + " foi eliminada com sucesso!"
      );
      activities.splice(activity_number - 1, 1);
      for (let idx = activity_number - 1; idx < activities.length; idx++) {
        activities[idx].activity_number -= 1;
      }
    }
    setConfirmActionActivity({ activity_id: -1, activity_number: -1 });
  };

  return (
    <>
      <Head>
        <title>UNO - Conteúdos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeaderWithLinkCard
            header_text={"Semana " + week_number + " - Editar atividades"}
            button_text="Nova atividade"
            link_path={`/contents/weeks/edit/${weekcontent_id}/activities/new`}
          />
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter as atividades. Por favor tente novamente." />
          </div>
        )}
        {activities.map(function (activity: ActivitiesType, index) {
          return (
            <div className="row g-3 my-1" key={activity.activity_number}>
              <ActivityCard
                weekcontent_id={weekcontent_id}
                activity_id={activity.id}
                num={activity.activity_number}
                title={activity.title}
                type={activity.type}
                description={activities_type[activity.type]}
                setConfirmActionActivity={setConfirmActionActivity}
              />
            </div>
          );
        })}

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <Link href={`/contents/weeks`}>
              <ButtonPrimary>Voltar para o plano de aulas</ButtonPrimary>
            </Link>
          </div>
        </div>
      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
      />
      {isLoading && <LoadingModal />}
      <ConfirmActionModal
        show={confirmActionActivity.activity_id !== -1}
        onHide={() =>
          setConfirmActionActivity({ activity_id: -1, activity_number: -1 })
        }
        confirmAction={() => deleteActivity(confirmActionActivity)}
        message={
          "Tem a certeza que pretende eliminar a atividade " +
          confirmActionActivity.activity_number +
          "?"
        }
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {

  const cookies = context.req.headers.cookie;
  const weekcontent_id = context.query.id;

  // Get week content details and activities
  let weekcontent_request;
  let activities_request;
  try {
    weekcontent_request = await axios.get(`${web_server}/api/contents/weeks/${weekcontent_id}`, {
      headers: {
        "Cookie": cookies
      }
    });
    activities_request = await axios.get(`${web_server}/api/activities?weekcontent_id=${weekcontent_id}`, {
      headers: {
        "Cookie": cookies
      }
    }); 
  } catch (e) {
    console.log(e);
    return {
      props: {
        weekcontent_id: weekcontent_id,
        activities: [],
        error: true,
      },
    };
  }

  // Handle error
  if (weekcontent_request.status !== 200 || activities_request.status !== 200) {
    return {
      props: {
        weekcontent_id: weekcontent_id,
        activities: [],
        error: true,
      },
    };
  }

  const weekcontent_response = weekcontent_request.data;
  const activities_response = activities_request.data;

  return {
    props: {
      weekcontent_id: weekcontent_id,
      week_number: weekcontent_response.week_number,
      activities: activities_response,
    },
  };
};
