import { GetServerSideProps } from "next";
import Head from "next/head";
import PageHeader from "../../../../../../components/utils/page_header";
import { useSelector, useDispatch } from "react-redux";
import { useEffect, useState } from "react";
import ErrorModal from "../../../../../../components/utils/error_modal";
import SuccessModal from "../../../../../../components/utils/success_modal";
import LoadingModal from "../../../../../../components/utils/loading_modal";
import { RootState } from "../../../../../../redux/store";
import ActivitiesService from "../../../../../../services/activities.service";
import { ActiveClassState } from "../../../../../../redux/features/active_class";
import ErrorCard from "../../../../../../components/utils/error_card";
import Loading from "../../../../../../components/utils/loading";
import EditMediaForm from "../../../../../../components/contents/activityform/edit_media_form";

export type MediaActivity = {
  media_type: string;
}

export type ActivityType = {
  id: number;
  type: string;
  order: number;
  title: string;
  description: string;
  createdAt: string;
  updatedAt: string;
  activitygroup_id: number;
  media: MediaActivity
};

interface EditActivityProps {
  activity_id: number;
}

export default function EditActivity({ activity_id }: EditActivityProps) {
  const dispatch = useDispatch();

  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isPageLoading, setIsPageLoading] = useState(true);
  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );
  const [activity, setActivity] = useState<ActivityType>({
    id: -1,
    type: "",
    order: 0,
    title: "",
    description: "",
    createdAt: "",
    updatedAt: "",
    activitygroup_id: 0,
    media: {
      media_type: ""
    }
  });
  const [error, setError] = useState(false);

  useEffect(() => {
    setIsPageLoading(true);
    ActivitiesService.getActivity(class_id, activity_id)
      .then((data) => {
        console.log(data);
        setActivity(data);
      })
      .catch((err) => {
        setError(true);
      })
      .finally(() => {
        setIsPageLoading(false);
      });
  }, [activity_id, class_id, dispatch]);

  if (isPageLoading) return <Loading />;

  return (
    <>
      <Head>
        <title>UNO - Conte√∫dos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeader
            header_text={`${activity.order}. Atividade - Editar`}
          />
        </div>

        <div className="row g-3 mt-2 mb-4">
          {error && (
            <div className="row g-3 my-2">
              <ErrorCard message="Ocorreu um erro ao obter a atividade. Por favor tente novamente." />
            </div>
          )}
          {!error && (
            <EditMediaForm
              setIsLoading={setIsLoading}
              setErrorMessage={setErrorMessage}
              setSuccessMessage={setSuccessMessage}
              activitygroup_id={activity.activitygroup_id}
              activity={activity}
            />
          )}
        </div>

      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
        button_link_path={`/contents/groups/edit/${activity.activitygroup_id}`}
      />
      {isLoading && <LoadingModal />}
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const activity_id = context.query.activity_id;

  return {
    props: {
      activity_id: activity_id,
    },
  };
};
