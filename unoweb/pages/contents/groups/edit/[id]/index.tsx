import { GetServerSideProps } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import ActivityCard from "../../../../../components/contents/activity_card";
import ErrorCard from "../../../../../components/utils/error_card";
import { ButtonPrimary } from "../../../../../utils/buttons";
import ErrorModal from "../../../../../components/utils/error_modal";
import LoadingModal from "../../../../../components/utils/loading_modal";
import SuccessModal from "../../../../../components/utils/success_modal";
import ConfirmActionModal from "../../../../../components/utils/confirm_action_modal";
import ActivitiesService from "../../../../../services/activities.service";
import ActivityGroupsService from "../../../../../services/activitygroups.service";
import { useSelector } from "react-redux";
import { RootState } from "../../../../../redux/store";
import { ActiveClassState } from "../../../../../redux/features/active_class";
import Loading from "../../../../../components/utils/loading";
import PageHeaderWithEditAndLinkCard from "../../../../../components/utils/page_header_with_edit_card_and_link";

export type ActivitiesType = {
  id: number;
  type: string;
  activity_number: number;
  weekcontent_id: number;
  title: string;
  createdAt: string;
  updatedAt: string;
};

interface ContentWeekProps {
  activitygroup_id: number;
}

export const activities_type: { [type: string]: string } = {
  video: "Vídeo",
  exercise: "Exercício",
  game: "Jogo",
  audio: "Áudio",
  question: "Pergunta",
};

export default function EditGroup({ activitygroup_id }: ContentWeekProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isPageLoading, setIsPageLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [confirmActionActivity, setConfirmActionActivity] = useState({
    activity_id: -1,
    activity_number: -1,
  });
  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );
  const [groupInfo, setGroupInfo] = useState({ order: 0, name: "" });
  const [error, setError] = useState(false);
  const [activities, setActivities] = useState<Array<ActivitiesType>>([]);

  const updateActivityGroupName = async ({
    id,
    name,
  }: {
    id: number;
    name: string;
  }) => {
    setIsLoading(true);

    const update_activitygroup_name_response =
      await ActivityGroupsService.updateActivityGroup(class_id, id, name);

    setIsLoading(false);

    if (update_activitygroup_name_response.error) {
      setErrorMessage(
        "Aconteceu um erro ao atualizar o nome do grupo de atividades. Por favor tente novamente."
      );
    } else {
      setGroupInfo({ order: groupInfo.order, name: name });
    }
  };

  const deleteActivity = async ({
    activity_id,
    activity_number,
  }: {
    activity_id: number;
    activity_number: number;
  }) => {
    setIsLoading(true);

    const delete_activity_response = await ActivitiesService.deleteActivity(
      class_id,
      activity_id,
      activitygroup_id
    );

    setIsLoading(false);

    if (delete_activity_response.error) {
      // An error occured
      setErrorMessage(
        "Aconteceu um erro ao apagar a atividade. Por favor tente novamente."
      );
    } else {
      // Activity deleted successfully
      setSuccessMessage(
        "A atividade " + activity_number + " foi eliminada com sucesso!"
      );
      let _activities = activities;
      _activities.splice(activity_number - 1, 1);
      for (let idx = activity_number - 1; idx < _activities.length; idx++) {
        _activities[idx].activity_number -= 1;
      }
      setActivities(_activities);
    }
    setConfirmActionActivity({ activity_id: -1, activity_number: -1 });
  };

  useEffect(() => {
    setIsPageLoading(true);
    ActivityGroupsService.getActivityGroup(class_id, activitygroup_id)
      .then((data) => {
        setGroupInfo({ order: data.order, name: data.name });
        ActivitiesService.getActivities(class_id, activitygroup_id)
          .then((data) => {
            setActivities(data);
          })
          .catch((err) => {
            setActivities([]);
            setError(true);
          });
      })
      .catch((err) => {
        setActivities([]);
        setError(true);
      })
      .finally(() => {
        setIsPageLoading(false);
      });
  }, [class_id, activitygroup_id]);

  if (isPageLoading) {
    return <Loading />;
  }

  return (
    <>
      <Head>
        <title>UNO - Conteúdos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeaderWithEditAndLinkCard
            id={activitygroup_id}
            name={groupInfo.name}
            button_text="Nova atividade"
            link_path={`/contents/groups/edit/${activitygroup_id}/activities/new`}
            updateAction={updateActivityGroupName}
            order={groupInfo.order}
          />
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter as atividades. Por favor tente novamente." />
          </div>
        )}
        {activities.map(function (activity: ActivitiesType, index) {
          return (
            <div className="row g-3 my-1" key={activity.activity_number}>
              <ActivityCard
                activitygroup_id={activitygroup_id}
                activity_id={activity.id}
                num={activity.activity_number}
                title={activity.title}
                type={activity.type}
                description={activities_type[activity.type]}
                setConfirmActionActivity={setConfirmActionActivity}
              />
            </div>
          );
        })}

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <Link href={`/contents/groups`}>
              <ButtonPrimary>Voltar para o plano de aulas</ButtonPrimary>
            </Link>
          </div>
        </div>
      </div>

      <ErrorModal
        show={errorMessage !== ""}
        onHide={() => setErrorMessage("")}
        message={errorMessage}
      />
      <SuccessModal
        show={successMessage !== ""}
        onHide={() => setSuccessMessage("")}
        message={successMessage}
      />
      {isLoading && <LoadingModal />}
      <ConfirmActionModal
        show={confirmActionActivity.activity_id !== -1}
        onHide={() =>
          setConfirmActionActivity({ activity_id: -1, activity_number: -1 })
        }
        confirmAction={() => deleteActivity(confirmActionActivity)}
        message={
          "Tem a certeza que pretende eliminar a atividade " +
          confirmActionActivity.activity_number +
          "?"
        }
      />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const activitygroup_id = context.query.id;

  return {
    props: {
      activitygroup_id: activitygroup_id,
    },
  };
};
