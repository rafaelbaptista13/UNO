import { GetServerSideProps } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import ExerciseActivity from "../../../../../../../components/contents/activities/exercise_activity";
import MediaActivity from "../../../../../../../components/contents/activities/media_activity";
import QuestionActivity from "../../../../../../../components/contents/activities/question_activity";
import ErrorCard from "../../../../../../../components/utils/error_card";
import Loading from "../../../../../../../components/utils/loading";
import PageHeader from "../../../../../../../components/utils/page_header";
import { ActiveClassState } from "../../../../../../../redux/features/active_class";
import { RootState } from "../../../../../../../redux/store";
import ActivityService from "../../../../../../../services/activities.service";

export type ActivityTypeType = {
  id: number;
  name: string;
};

export type MediaActivityType = {
  media_type: string | null;
};

export type ExerciseActivityType = {
  media_type: string | null;
};

export type QuestionActivityType = {
  question: string;
  answers: Array<Answer>;
  media_type: string | null;
  one_answer_only: boolean;
};

export type Answer = {
  order: number;
  answer: string;
  media_type: string | null;
  chosen: boolean | null;
};

export type GameActivityType = {
  mode: string;
  notes: Array<MusicalNote>;
  sequence_length: number | null;
  chosen_notes: Array<{ order: number; note_id: number }> | null;
};

export type MusicalNote = {
  id: number;
  order: number;
  name: string;
  violin_string: number;
  violin_finger: number;
  viola_string: number;
  viola_finger: number;
  note_code: string;
  type: string;
};

export type ActivityType = {
  id: number;
  activitytype: ActivityTypeType;
  order: number;
  activitygroup_id: number;
  title: string;
  description: string | null;
  completed: boolean;
  createdAt: string;
  updatedAt: string;
  media_activity: MediaActivityType | null;
  exercise_activity: ExerciseActivityType | null;
  question_activity: QuestionActivityType | null;
  game_activity: GameActivityType | null;
};

interface StudentActivityPageProps {
  activitygroup_id: number;
  student_id: number;
  activity_id: number;
}

export default function StudentActivityPage({
  activitygroup_id,
  student_id,
  activity_id,
}: StudentActivityPageProps) {
  // On Page Load
  const [isPageLoading, setIsPageLoading] = useState(false);
  const [error, setError] = useState(false);

  // Page Data
  const [activity, setActivity] = useState<ActivityType>();

  // Class state (Redux)
  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );

  const [activitygroup_name, setActivityGroupName] = useState("");
  const [student_name, setStudentName] = useState("");

  useEffect(() => {
    setIsPageLoading(true);
    ActivityService.getActivityOfStudent(
      class_id,
      activitygroup_id,
      activity_id,
      student_id
    )
      .then((data) => {
        console.log(data.activity);
        setActivity(data.activity);
        setActivityGroupName(data.name);
        setStudentName(data.first_name + " " + data.last_name);
      })
      .catch((err) => {
        setError(true);
      })
      .finally(() => {
        setIsPageLoading(false);
      });
  }, [activity_id, activitygroup_id, class_id, student_id]);

  if (isPageLoading) return <Loading />;

  return (
    <>
      <Head>
        <title>UNO - Conte√∫dos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          {activity !== undefined && (
            <PageHeader
              header_text={
                activitygroup_name +
                " - " +
                student_name +
                " - " +
                activity.order +
                ". " +
                activity.title
              }
            />
          )}
          {activity === undefined && (
            <PageHeader
              header_text={
                activitygroup_name + " - " + student_name + " - Erro"
              }
            />
          )}
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter os grupos de atividades. Por favor tente novamente." />
          </div>
        )}

        {activity?.activitytype.name === "Media" && (
          <MediaActivity
            student_id={student_id}
            activitygroup_id={activitygroup_id}
            activity_id={activity_id}
            title={activity.title}
            description={activity.description}
            media_type={activity.media_activity!!.media_type}
            completed={activity.completed}
          />
        )}
        {activity?.activitytype.name === "Exercise" && (
          <ExerciseActivity
            student_id={student_id}
            activitygroup_id={activitygroup_id}
            activity_id={activity_id}
            title={activity.title}
            description={activity.description}
            media_type={activity.exercise_activity!!.media_type}
            completed={activity.completed}
          />
        )}
        {activity?.activitytype.name === "Question" && (
          <QuestionActivity
            student_id={student_id}
            activitygroup_id={activitygroup_id}
            activity_id={activity_id}
            title={activity.title}
            media_type={activity.question_activity!!.media_type}
            completed={activity.completed}
            question_info={activity.question_activity!!}
          />
        )}
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const activitygroup_id = context.query.id;
  const student_id = context.query.student_id;
  const activity_id = context.query.activity_id;

  return {
    props: {
      activitygroup_id: activitygroup_id,
      student_id: student_id,
      activity_id: activity_id,
    },
  };
};
