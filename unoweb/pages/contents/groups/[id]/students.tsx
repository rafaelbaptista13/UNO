import { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import StudentContentCard from "../../../../components/contents/student_content_card";
import ErrorCard from "../../../../components/utils/error_card";
import Loading from "../../../../components/utils/loading";
import PageHeader from "../../../../components/utils/page_header";
import { ActiveClassState } from "../../../../redux/features/active_class";
import { RootState } from "../../../../redux/store";
import ActivityGroupsService from "../../../../services/activitygroups.service";
import { ButtonPrimary } from "../../../../utils/buttons";

interface ActivityGroupProps {
  activitygroup_id: number;
}

export type StudentType = {
  id: number;
  first_name: string;
  last_name: string;
  completed: number;
};

export default function ActivityGroup({
  activitygroup_id,
}: ActivityGroupProps) {
  // On Page Load
  const [isPageLoading, setIsPageLoading] = useState(false);
  const [error, setError] = useState(false);

  const { id: class_id } = useSelector<RootState, ActiveClassState>(
    (state) => state.active_class
  );
  const [students, setStudents] = useState<Array<StudentType>>([]);
  const [total_activities, setTotalActivities] = useState(0);
  const [activitygroup_name, setActivityGroupName] = useState("");

  useEffect(() => {
    setIsPageLoading(true);
    ActivityGroupsService.getStudentsFromActivityGroup(
      class_id,
      activitygroup_id
    )
      .then((data) => {
        setStudents(data.students);
        setTotalActivities(data.total_activities);
        setActivityGroupName(data.name);
      })
      .catch((err) => {
        setError(true);
      })
      .finally(() => {
        setIsPageLoading(false);
      });
  }, [class_id, activitygroup_id]);

  if (isPageLoading) {
    return <Loading />;
  }

  return (
    <>
      <Head>
        <title>UNO - Grupo de atividades</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container px-4">
        <div className="row g-3 mt-2 mb-4">
          <PageHeader header_text={activitygroup_name} />
        </div>
        {error && (
          <div className="row g-3 my-2">
            <ErrorCard message="Ocorreu um erro ao obter a informação dos alunos. Por favor tente novamente." />
          </div>
        )}
        {students.map(function (student: StudentType, index) {
          return (
            <div className="row g-3 my-1" key={student.id}>
              <StudentContentCard
                activitygroup_id={activitygroup_id}
                student_id={student.id}
                name={student.first_name + " " + student.last_name}
                completed_activities={student.completed}
                total_activities={total_activities}
              />
            </div>
          );
        })}

        <div className="row g-3 my-2">
          <div className="col gap-3 d-flex justify-content-end">
            <Link
              href={`/contents/groups`}
            >
              <ButtonPrimary>Voltar</ButtonPrimary>
            </Link>
          </div>
        </div>
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const activitygroup_id = context.query.id;

  return {
    props: {
      activitygroup_id: activitygroup_id,
    },
  };
};
